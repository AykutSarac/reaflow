{"version":3,"file":"Proximity.stories-ae1d63ab.js","sources":["../../src/helpers/useProximity.ts"],"sourcesContent":["import { RefObject, useCallback, useEffect, useRef, useState } from 'react';\nimport { CanvasRef } from '../Canvas';\nimport { getCoords } from '../utils/helpers';\nimport { Matrix2D, Point2D } from 'kld-affine';\nimport { IntersectionQuery } from 'kld-intersections';\nimport { LayoutNodeData } from '../types';\n\nexport interface ProximityProps {\n  /**\n   * Disable proximity or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Min distance required before match is made.\n   *\n   * @default 40\n   */\n  minDistance?: number;\n\n  /**\n   * Ref pointer to the canvas.\n   */\n  canvasRef?: RefObject<CanvasRef>;\n\n  /**\n   * Distance from the match.\n   */\n  onDistanceChange?: (distance: number | null) => void;\n\n  /**\n   * When a match state has changed.\n   */\n  onMatchChange?: (matche: string | null, distance: number | null) => void;\n\n  /**\n   * When the pointer intersects a node.\n   */\n  onIntersects?: (matche: string | null) => void;\n}\n\nexport interface ProximityResult {\n  /**\n   * The matched id of the node.\n   */\n  match: string | null;\n\n  /**\n   * Event for drag started.\n   */\n  onDragStart: (event: PointerEvent) => void;\n\n  /**\n   * Event for active dragging.\n   */\n  onDrag: (event: PointerEvent) => void;\n\n  /**\n   * Event for drag ended.\n   */\n  onDragEnd: (event: PointerEvent) => void;\n}\n\ninterface PointNode {\n  points: Point2D[];\n  node: LayoutNodeData;\n}\n\nconst buildPoints = (nodes: LayoutNodeData[], parent?: LayoutNodeData) => {\n  const results: PointNode[] = [];\n\n  if (nodes?.length) {\n    for (const node of nodes) {\n      let x = node.x;\n      let y = node.y;\n\n      // NOTE: If we have a parent, let's update the points\n      // to account for the parent's position\n      if (parent) {\n        x = parent.x + x;\n        y = parent.y + y;\n      }\n\n      const points = [\n        // top-left\n        new Point2D(x, y),\n        // bottom-right\n        new Point2D(x + node.width, y + node.height)\n      ];\n\n      results.push({\n        points,\n        node\n      });\n\n      if (node.children?.length) {\n        results.push(...buildPoints(node.children, node));\n      }\n    }\n  }\n\n  return results;\n};\n\nconst distanceFromNode = (mousePoint: Point2D, node: PointNode) => {\n  const [tl, br] = node.points;\n  let dx = 0;\n  let dy = 0;\n\n  // Compute distance to elem in X\n  if (mousePoint.x < tl.x) {\n    dx = tl.x - mousePoint.x;\n  } else if (mousePoint.x > br.x) {\n    dx = br.x - mousePoint.x;\n  }\n\n  // Compute distance to elem in Y\n  if (mousePoint.y < tl.y) {\n    dy = tl.y - mousePoint.y;\n  } else if (mousePoint.y > br.y) {\n    dy = br.y - mousePoint.y;\n  }\n\n  return Math.floor(Math.sqrt(dx * dx + dy * dy));\n};\n\nconst findNodeIntersection = (\n  event: PointerEvent,\n  matrix: Matrix2D,\n  points: PointNode[],\n  minDistance: number\n) => {\n  const cubes = [];\n  const mousePoint = new Point2D(event.x, event.y).transform(matrix);\n\n  for (const point of points) {\n    // TODO: Make this support other shape types...\n    const intersects = IntersectionQuery.pointInRectangle(\n      mousePoint,\n      point.points[0],\n      point.points[1]\n    );\n\n    // Calc the distances\n    // https://github.com/thelonious/kld-affine/issues/24\n    const minDist = distanceFromNode(mousePoint, point);\n\n    cubes.push({\n      node: point.node,\n      minDist,\n      intersects\n    });\n  }\n\n  let foundDist = minDistance;\n  let intersectedNodeId = null;\n  let foundNodeId = null;\n  for (const cube of cubes) {\n    if (cube.minDist < foundDist && !cube.intersects) {\n      foundNodeId = cube.node.id;\n      foundDist = cube.minDist;\n    }\n\n    if (cube.intersects) {\n      intersectedNodeId = cube.node.id;\n    }\n  }\n\n  if (intersectedNodeId) {\n    // We are are just inside a node already\n    // and there is no closer children ( nested case )\n    if (!foundNodeId || foundNodeId === intersectedNodeId) {\n      // If we are inside the intersected node and its the\n      // closest node, let's reset the distance to 0\n      foundNodeId = intersectedNodeId;\n      foundDist = 0;\n    }\n  }\n\n  return {\n    intersectedNodeId,\n    foundNodeId,\n    foundDist\n  };\n};\n\nexport const useProximity = ({\n  canvasRef,\n  disabled,\n  minDistance = 40,\n  ...rest\n}: ProximityProps) => {\n  const lastIntersectRef = useRef<string | null>(null);\n  const lastMatchRef = useRef<string | null>(null);\n  const lastDistance = useRef<number | null>(null);\n  const frame = useRef<number>(0);\n\n  // Reference: https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n  const eventRefs = useRef(rest);\n  useEffect(() => {\n    eventRefs.current = rest;\n  }, [rest]);\n\n  const [match, setMatch] = useState<string | null>(null);\n  const [matrix, setMatrix] = useState<Matrix2D | null>(null);\n  const [points, setPoints] = useState<PointNode[] | null>(null);\n\n  const onDragStart = useCallback(() => {\n    if (disabled) {\n      return;\n    }\n\n    const ref = canvasRef.current;\n\n    // @ts-ignore\n    setMatrix(\n      getCoords({\n        containerRef: ref.containerRef,\n        zoom: ref.zoom,\n        layoutXY: ref.xy\n      })\n    );\n    setPoints(buildPoints(ref.layout.children));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disabled]);\n\n  const onDrag = useCallback(\n    (event: PointerEvent) => {\n      if (!matrix || disabled) {\n        return;\n      }\n\n      const { onMatchChange, onIntersects, onDistanceChange } =\n        eventRefs.current;\n\n      const { intersectedNodeId, foundNodeId, foundDist } =\n        findNodeIntersection(event, matrix, points, minDistance);\n      const nextDist = foundDist !== minDistance ? foundDist : null;\n\n      if (foundNodeId !== lastMatchRef.current) {\n        onMatchChange?.(foundNodeId, foundDist);\n      }\n\n      if (intersectedNodeId !== lastIntersectRef.current) {\n        onIntersects?.(intersectedNodeId);\n      }\n\n      if (onDistanceChange && nextDist !== lastDistance.current) {\n        cancelAnimationFrame(frame.current);\n        frame.current = requestAnimationFrame(() => {\n          onDistanceChange(nextDist);\n        });\n      }\n\n      // Hold these in refs for race cases\n      lastIntersectRef.current = intersectedNodeId;\n      lastMatchRef.current = foundNodeId;\n      lastDistance.current = nextDist;\n\n      setMatch(foundNodeId);\n    },\n    [matrix, disabled, minDistance, points]\n  );\n\n  useEffect(() => {\n    return () => cancelAnimationFrame(frame.current);\n  });\n\n  const onDragEnd = useCallback(() => {\n    if (!disabled) {\n      setMatch(null);\n      setMatrix(null);\n      setPoints(null);\n    }\n  }, [disabled]);\n\n  return {\n    match,\n    onDragStart,\n    onDrag,\n    onDragEnd\n  } as ProximityResult;\n};\n"],"names":["buildPoints","nodes","parent","results","node","x","y","points","Point2D","_a","distanceFromNode","mousePoint","tl","br","dx","dy","findNodeIntersection","event","matrix","minDistance","cubes","point","intersects","IntersectionQuery","minDist","foundDist","intersectedNodeId","foundNodeId","cube","useProximity","canvasRef","disabled","rest","lastIntersectRef","useRef","lastMatchRef","lastDistance","frame","eventRefs","useEffect","match","setMatch","useState","setMatrix","setPoints","onDragStart","useCallback","ref","getCoords","onDrag","onMatchChange","onIntersects","onDistanceChange","nextDist","onDragEnd"],"mappings":"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}