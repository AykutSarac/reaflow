{"version":3,"file":"Undo-b6d27c1c.js","sources":["../../docs/Helpers/Undo.mdx"],"sourcesContent":["import { Meta } from '@storybook/addon-docs/blocks';\n\n<Meta title=\"Docs/Helpers/Undo Redo\" />\n\n# Undo Redo\n\n---\n\nOut of the box, reaflow supports undo and redo functionality. This can be\ndone optionally using the `useUndo` hook. It also supports hotkeys using\n[reakeys](https://github.com/reaviz/reakeys).\n\n## Getting Started\nThe `useUndo` hooks will automatically manage the history of the\nnodes and edges, all you need to do is manage the current state.\nThe hook accepts the following arguments:\n\n```ts\nexport interface UndoProps {\n  /**\n   * Current node datas.\n   */\n  nodes: NodeData[];\n\n  /**\n   * Current edge datas.\n   */\n  edges: EdgeData[];\n\n  /**\n   * Max history count.\n   */\n  maxHistory?: number;\n\n  /**\n   * Disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * On undo/redo event handler.\n   */\n  onUndoRedo: (state: UndoRedoEvent) => void;\n}\n```\n\nTo implement the hook all you need to do is import it like:\n\n```tsx\nimport { useUndo, EdgeData, Canvas, NodeData } from 'reaflow';\n\nconst MyApp = () => {\n  const [nodes, setNodes] = useState<NodeData[]>([]);\n  const [edges, setEdges] = useState<EdgeData[]>([]);\n\n  const { undo, redo, canUndo, canRedo } = useUndo({\n    nodes,\n    edges,\n    onUndoRedo: (state: UndoRedoEvent) => {\n      console.log('Undo / Redo', state);\n      // Note: This is where YOUR state comes into play\n      setEdges(state.edges);\n      setNodes(state.nodes);\n    }\n  });\n\n  return <Canvas nodes={nodes} edges={edges} />;\n}\n```\n\nThe `UndoRedoEvent` interface looks like:\n\n```ts\nexport interface UndoRedoEvent {\n  /**\n   * Updated node datas.\n   */\n  nodes?: NodeData[];\n\n  /**\n   * Updated edge datas.\n   */\n  edges?: EdgeData[];\n\n  /**\n   * Type of change.\n   */\n  type: 'undo' | 'redo' | 'clear';\n\n  /**\n   * Whether you can undo now.\n   */\n  canUndo: boolean;\n\n  /**\n   * Whether you can redo now.\n   */\n  canRedo: boolean;\n}\n```\n\nNow anytime you make a change to the `nodes` or `edges` the\nhook will update the internal history and then you can\ncall `undo` or `redo` functions to retrieve those states.\n\nThe hook returns other properties such as:\n\n```ts\nexport interface UndoResult {\n  /**\n   * Can undo or not.\n   */\n  canUndo: boolean;\n\n  /**\n   * Can redo or not.\n   */\n  canRedo: boolean;\n\n  /**\n   * Count of existing changes.\n   */\n  count: () => number;\n\n  /**\n   * Clear state and save first element of new state.\n   */\n  clear: (nodes: NodeData[]; edges: EdgeData[]) => void;\n\n  /**\n   * Get history of state.\n   */\n  history: () => { nodes: NodeData[]; edges: EdgeData[] }[];\n\n  /**\n   * Perform an redo.\n   */\n  redo: () => void;\n\n  /**\n   * Perform a undo.\n   */\n  undo: () => void;\n}\n```\n"],"names":["_createMdxContent","props","_components","_provideComponents","_jsxs","_Fragment","_jsx","Meta","MDXContent","MDXLayout"],"mappings":"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"}