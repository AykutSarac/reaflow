{"version":3,"file":"crudHelpers-031fd461.js","sources":["../../src/helpers/crudHelpers.ts"],"sourcesContent":["import { EdgeData, NodeData, PortData } from '../types';\n\n/**\n * Helper function for upserting a node in a edge.\n */\nexport function upsertNode(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  edge: EdgeData,\n  newNode: NodeData\n) {\n  const oldEdgeIndex = edges.findIndex((e) => e.id === edge.id);\n  const edgeBeforeNewNode = {\n    ...edge,\n    id: `${edge.from}-${newNode.id}`,\n    to: newNode.id\n  };\n  const edgeAfterNewNode = {\n    ...edge,\n    id: `${newNode.id}-${edge.to}`,\n    from: newNode.id\n  };\n\n  if (edge.fromPort && edge.toPort) {\n    edgeBeforeNewNode.fromPort = edge.fromPort;\n    edgeBeforeNewNode.toPort = `${newNode.id}-to`;\n\n    edgeAfterNewNode.fromPort = `${newNode.id}-from`;\n    edgeAfterNewNode.toPort = edge.toPort;\n  }\n\n  edges.splice(oldEdgeIndex, 1, edgeBeforeNewNode, edgeAfterNewNode);\n\n  return {\n    nodes: [...nodes, newNode],\n    edges: [...edges]\n  };\n}\n\n/**\n * Helper function for removing a node between edges and\n * linking the children.\n */\nexport function removeAndUpsertNodes(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  removeNodes: NodeData | NodeData[],\n  onNodeLinkCheck?: (\n    newNodes: NodeData[],\n    newEdges: EdgeData[],\n    from: NodeData,\n    to: NodeData,\n    port?: PortData\n  ) => undefined | boolean\n) {\n  if (!Array.isArray(removeNodes)) {\n    removeNodes = [removeNodes];\n  }\n\n  const nodeIds = removeNodes.map((n) => n.id);\n  const newNodes = nodes.filter((n) => !nodeIds.includes(n.id));\n  const newEdges = edges.filter(\n    (e) => !nodeIds.includes(e.from) && !nodeIds.includes(e.to)\n  );\n\n  for (const nodeId of nodeIds) {\n    const sourceEdges = edges.filter((e) => e.to === nodeId);\n    const targetEdges = edges.filter((e) => e.from === nodeId);\n\n    for (const sourceEdge of sourceEdges) {\n      for (const targetEdge of targetEdges) {\n        const sourceNode = nodes.find((n) => n.id === sourceEdge.from);\n        const targetNode = nodes.find((n) => n.id === targetEdge.to);\n        if (sourceNode && targetNode) {\n          const canLink = onNodeLinkCheck?.(\n            newNodes,\n            newEdges,\n            sourceNode,\n            targetNode\n          );\n          if (canLink === undefined || canLink) {\n            newEdges.push({\n              id: `${sourceNode.id}-${targetNode.id}`,\n              from: sourceNode.id,\n              to: targetNode.id,\n              parent: sourceNode?.parent\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    edges: newEdges,\n    nodes: newNodes\n  };\n}\n\n/**\n * Helper function to remove a node and its related edges.\n */\nexport function removeNode(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  removeNodes: string | string[]\n) {\n  if (!Array.isArray(removeNodes)) {\n    removeNodes = [removeNodes];\n  }\n\n  const newNodes = [];\n  const newEdges = [];\n\n  for (const node of nodes) {\n    const has = removeNodes.some((n) => n === node.id);\n    if (!has) {\n      newNodes.push(node);\n    }\n  }\n\n  for (const edge of edges) {\n    const has = removeNodes.some((n) => n === edge.from || n === edge.to);\n    if (!has) {\n      newEdges.push(edge);\n    }\n  }\n\n  return {\n    nodes: newNodes,\n    edges: newEdges\n  };\n}\n\n/**\n * Helper function to remove a node's related edges.\n */\nexport function removeEdgesFromNode(nodeId: string, edges: EdgeData[]) {\n  return edges.filter((edge) => !(edge.to === nodeId || edge.from === nodeId));\n}\n\n/**\n * Remove edge(s)\n */\nexport function removeEdge(edges: EdgeData[], edge: EdgeData | EdgeData[]) {\n  const deletions: EdgeData[] = !Array.isArray(edge) ? [edge] : edge;\n  const edgeIds = deletions.map((e) => e.id);\n  return edges.filter((e) => !edgeIds.includes(e.id));\n}\n\n/**\n * Create an edge given 2 nodes.\n */\nexport function createEdgeFromNodes(fromNode: NodeData, toNode: NodeData) {\n  return {\n    id: `${fromNode.id}-${toNode.id}`,\n    from: fromNode.id,\n    to: toNode.id,\n    parent: toNode.parent\n  };\n}\n\n/**\n * Add a node and optional edge.\n */\nexport function addNodeAndEdge(\n  nodes: NodeData[],\n  edges: EdgeData[],\n  node: NodeData,\n  toNode?: NodeData\n) {\n  return {\n    nodes: [...nodes, node],\n    edges: [...edges, ...(toNode ? [createEdgeFromNodes(toNode, node)] : [])]\n  };\n}\n"],"names":["upsertNode","nodes","edges","edge","newNode","oldEdgeIndex","e","edgeBeforeNewNode","edgeAfterNewNode","removeAndUpsertNodes","removeNodes","onNodeLinkCheck","nodeIds","n","newNodes","newEdges","nodeId","sourceEdges","targetEdges","sourceEdge","targetEdge","sourceNode","targetNode","canLink","removeNode","node","createEdgeFromNodes","fromNode","toNode","addNodeAndEdge"],"mappings":"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"}