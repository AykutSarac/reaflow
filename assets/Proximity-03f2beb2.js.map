{"version":3,"file":"Proximity-03f2beb2.js","sources":["../../docs/Helpers/Proximity.mdx"],"sourcesContent":["import { Meta, Story } from '@storybook/addon-docs/blocks';\n\n<Meta title=\"Docs/Helpers/Proximity\" />\n\n# Proximity\n\n---\n\nThe `useProximity` hook allows you to use the distance\nfrom a node to link them rather than when the mouse\nenter/leaves the node. This is most useful for editor\nstyle interfaces when a user is dragging a element\nonto the canvas and wants to drop the node intelligently.\n\n## Getting Started\nTo get started, let's import the `useProximity` hook\nand setup a drag and drop interface using `framer-motion`.\nBelow we will create a simple example ( referrer to demo for\nfunctional demo ) and walk through each step. The example\nmight seem large but it's meant to be overly verbose for\neducational purposes.\n\n```tsx\nimport React, { useState, useRef } from 'react';\nimport { useProximity, CanvasRef, addNodeAndEdge, Canvas, EdgeData, NodeData } from 'reaflow';\nimport { useDragControls } from 'framer-motion';\n\nconst App = () => {\n  // This is the controls from framer-motion for dragging\n  const dragControls = useDragControls();\n\n  // We need to create a reference to the canvas so we can pass\n  // it to the hook so it has knowledge about the canvas\n  const canvasRef = useRef<CanvasRef | null>(null);\n\n  // We need to determine if we can drop the element onto the canvas\n  const [droppable, setDroppable] = useState<boolean>(false);\n\n  // Let's save the node that we have \"entered\" so that when the user\n  // ends the drag we can link it\n  const [enteredNode, setEnteredNode] = useState<NodeData | null>(null);\n\n  // Just some empty arrays for demo purposes, this would normally\n  // be whatever your graph contains\n  const [edges, setEdges] = useState<EdgeData[]>([]);\n  const [nodes, setNodes] = useState<NodeData[]>([]);\n\n  const {\n    // Drag event handlers we need to hook into our drag\n    onDragStart: onProximityDragStart,\n    onDrag: onProximityDrag,\n    onDragEnd: onProximityDragEnd\n  } = useProximity({\n    // The ref we defined above\n    canvasRef,\n    onMatchChange: (match: string | null) => {\n      // If there is a match, let's find the node in\n      // our models here\n      let matchNode: NodeData | null = null;\n      if (match) {\n        matchNode = nodes.find(n => n.id === match);\n      }\n\n      // Now let's set the matched node\n      setEnteredNode(matchNode);\n\n      // We set this seperately from the enteredNode because\n      // you might want to do some validation on whether you can drop or not\n      setDroppable(matchNode !== null);\n    }\n  });\n\n  const onDragStart = (event) => {\n    // Call the hook's drag start\n    onProximityDragStart(event);\n\n    // Have the drag snap to our cursor\n    dragControls.start(event, { snapToCursor: true });\n  };\n\n  const onDragEnd = (event) => {\n    // Call our proximity to let it know we are done dragging\n    onProximityDragEnd(event);\n\n    // If its droppable let's add it to the canvas\n    if (droppable) {\n      // Let's use our addNodeAndEdge helper function\n      const result = addNodeAndEdge(\n        nodes,\n        edges,\n        // Make this whatever you want to drop\n        {\n          id: 'random',\n          text: 'random'\n        },\n        // Let's add it using the closest node\n        enteredNode\n      );\n\n      // Update our edges and nodes\n      setNodes(result.nodes);\n      setEdges(result.edges);\n    }\n\n    // Reset the drop state\n    setDroppable(false);\n    setEnteredNode(null);\n  };\n\n  return (\n    <div>\n      <motion.div className=\"block\" onMouseDown={onDragStart}>\n        Drag Me!\n      </motion.div>\n      <motion.div\n        drag\n        dragControls={dragControls}\n        onDrag={onProximityDrag}\n        onDragEnd={onDragEnd}\n      >\n        {activeDrag && (\n          <div>\n            Dragger!\n          </div>\n        )}\n      </motion.div>\n      <Canvas\n        ref={canvasRef}\n        nodes={nodes}\n        edges={edges}\n      />\n    </div>\n  )\n}\n```\n\nNote: You don't have to use `framer-motion` but since `reaflow`\nuses it internally its probably best to stick with that.\n\n## Interfaces\nThe `useProximity` hook accepts the following properties:\n\n```ts\nexport interface ProximityProps {\n  /**\n   * Disable proximity or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Min distance required before match is made. Default is 40.\n   */\n  minDistance?: number;\n\n  /**\n   * Ref pointer to the canvas.\n   */\n  canvasRef?: RefObject<CanvasRef>;\n\n  /**\n   * Distance from the match.\n   */\n  onDistanceChange?: (distance: number | null) => void;\n\n  /**\n   * When a match state has changed.\n   */\n  onMatchChange?: (matche: string | null, distance: number | null) => void;\n\n  /**\n   * When the pointer intersects a node.\n   */\n  onIntersects?: (matche: string | null) => void;\n}\n```\n\nand it returns the following interface:\n\n```ts\nexport interface ProximityResult {\n  /**\n   * The matched id of the node.\n   */\n  match: string | null;\n\n  /**\n   * Event for drag started.\n   */\n  onDragStart: (event: PointerEvent) => void;\n\n  /**\n   * Event for active dragging.\n   */\n  onDrag: (event: PointerEvent) => void;\n\n  /**\n   * Event for drag ended.\n   */\n  onDragEnd: (event: PointerEvent) => void;\n}\n```\n\n## How it works\nUnder the hood it will coorelate the mouse pointer position\nto the canvas ( including offset and zoom ) using [kld-affine](https://github.com/thelonious/kld-affine)\nwhich is a geometric matrices library.\n\nNext as the user drags it will measure the distance of all the nodes\nrelative to the mouse pointer position and if find the node with\nthe closest distance and determine if it falls in the threshold\nwhich by default is `40`.\n"],"names":["_createMdxContent","props","_components","_provideComponents","_jsxs","_Fragment","_jsx","Meta","MDXContent","MDXLayout"],"mappings":"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"}